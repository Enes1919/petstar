import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: const MyHomePage(pageTitle: 'Petstar'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.pageTitle}) : super(key: key);
  final String pageTitle;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  static const List<String> listItems = [
    "Labrador",
    "Golden Retriever",
    "Jack Russel Terrier",
    "Australian Shepherd",
    "Yorkshire Terrier",
  ];

  Map<String, Set<String>> selectedItemsMap = {
    "Dropdown 1": {},
    "Dropdown 2": {},
    "Dropdown 3": {},
    "Dropdown 4": {},
    "Dropdown 5": {},
  };

  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.pageTitle),
      ),
      body: Container(
        color: const Color(0xFFE5E5E5),
        child: Center(
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: <Widget>[
                const SizedBox(height: 64.0),
                buildHeaderText("Was bringt dein neuer bester Freund mit?"),
                const SizedBox(height: 16.0),
                buildDropdownColumn("Rasse", "Dropdown 1"),
                const SizedBox(height: 16.0),
                buildDropdownColumn("Geschlecht", "Dropdown 2"),
                const SizedBox(height: 16.0),
                buildCustomDropdown("Eigenschaften", "Dropdown 3"),
                const SizedBox(height: 16.0),
                buildDropdownColumn("Alter", "Dropdown 4"),
                const SizedBox(height: 16.0),
                buildDropdownColumn("Erfahrung", "Dropdown 5"),
                const SizedBox(height: 16.0),
                buildActionButton(),
              ],
            ),
          ),
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        backgroundColor: Colors.blue,
        selectedItemColor: const Color.fromRGBO(178, 5, 34, 1),
        unselectedItemColor: Colors.grey,
        iconSize: 30,
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });

          if (index == 2) {
            Navigator.of(context).pushReplacement(MaterialPageRoute(
              builder: (context) => MyHomePage(
                pageTitle: '',
              ),
            ));
          } else if (index == 3) {
            Navigator.of(context).pushReplacement(MaterialPageRoute(
              builder: (context) => Tierkategorie(),
            ));
          }
        },
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.favorite),
            label: 'Favoriten',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.chat),
            label: 'Chats',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.pets),
            label: 'Suche',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'Profil',
          ),
        ],
      ),
    );
  }

  Widget buildHeaderText(String text) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Text(
        text,
        textAlign: TextAlign.center,
        style: TextStyle(
          color: const Color(0xFF26117A),
          fontSize: 28,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  Widget buildDropdownColumn(String headerText, String labelText) {
    Set<String> valueChoose = selectedItemsMap[labelText] ?? {};

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          headerText,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
        const SizedBox(height: 8.0),
        Container(
          height: 40.0,
          width: double.infinity,
          padding: const EdgeInsets.only(left: 16, right: 16),
          decoration: BoxDecoration(
            color: Colors.white,
            border: Border.all(color: Colors.grey, width: 1),
            borderRadius: BorderRadius.circular(15),
          ),
          child: Row(
            children: [
              Expanded(
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      hint: Text("-"),
                      items: listItems.map((e) {
                        return DropdownMenuItem<String>(
                          value: e,
                          child: Text(e),
                        );
                      }).toList(),
                      onChanged: (String? newValue) {
                        setState(() {
                          selectedItemsMap[labelText] = {newValue!};
                        });
                      },
                      value: valueChoose.isNotEmpty ? valueChoose.first : null,
                      key: Key(labelText), // Eindeutiger Key pro Dropdown
                    ),
                  ),
                ),
              ),
              Icon(Icons
                  .arrow_drop_down), // Verschiebe die Pfeile nach rechts außen
            ],
          ),
        ),
      ],
    );
  }

  Widget buildCustomDropdown(String headerText, String labelText) {
    Set<String> selectedItems = selectedItemsMap[labelText] ?? {};

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          headerText,
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
          ),
        ),
        const SizedBox(height: 8.0),
        Container(
          height: 40.0,
          width: double.infinity,
          padding: const EdgeInsets.only(left: 16, right: 16),
          decoration: BoxDecoration(
            color: Colors.white,
            border: Border.all(color: Colors.grey, width: 1),
            borderRadius: BorderRadius.circular(15),
          ),
          child: Row(
            children: [
              Expanded(
                child: Align(
                  alignment: Alignment.centerLeft,
                  child: InkWell(
                    onTap: () {
                      _showCustomDropdown(context, labelText, selectedItems);
                    },
                    child: Text(
                      selectedItems.isNotEmpty ? selectedItems.join(", ") : "-",
                      style: const TextStyle(fontSize: 16),
                    ),
                  ),
                ),
              ),
              Icon(Icons
                  .arrow_drop_down), // Verschiebe die Pfeile nach rechts außen
            ],
          ),
        ),
      ],
    );
  }

  Future<void> _showCustomDropdown(
      BuildContext context, String labelText, Set<String> selectedItems) async {
    Set<String> newSelectedItems = Set.from(selectedItems);

    await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text("-"),
          content: SingleChildScrollView(
            child: Column(
              children: listItems.map((item) {
                return CheckboxListTile(
                  title: Text(item),
                  value: newSelectedItems.contains(item),
                  onChanged: (bool? value) {
                    if (value != null) {
                      setState(() {
                        if (value) {
                          newSelectedItems.add(item);
                        } else {
                          newSelectedItems.remove(item);
                        }
                      });
                    }
                  },
                );
              }).toList(),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text("Abbrechen"),
            ),
            TextButton(
              onPressed: () {
                setState(() {
                  selectedItemsMap[labelText] = Set.from(newSelectedItems);
                });
                Navigator.of(context).pop();
              },
              child: const Text("Fertig"),
            ),
          ],
        );
      },
    );
  }

  Widget buildActionButton() {
    return Container(
      width: MediaQuery.of(context).size.width / 2,
      margin: const EdgeInsets.only(top: 16.0),
      child: ElevatedButton(
        onPressed: () {
          // Aktion, die beim Klicken auf den Button ausgeführt wird
        },
        style: ElevatedButton.styleFrom(
          primary: const Color(0xFFB20522),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
        ),
        child: Text(
          "Los geht's!",
          style: TextStyle(
            color: Colors.white,
            fontSize: 16,
          ),
        ),
      ),
    );
  }
}

class Tierkategorie extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tierkategorie'),
      ),
      body: Center(
        child: Text('Inhalt der Tierkategorie Seite'),
      ),
    );
  }
}
